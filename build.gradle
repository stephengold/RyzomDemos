plugins {
    id 'application'
    id 'java'
}

description = 'build characters using Ryzom assets'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// current version of the Engine:
ext.jmonkeyengineVersion = '3.5.0-stable'

tasks.withType(JavaCompile) { // compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true
    options.encoding = 'UTF-8'
}

tasks.withType(JavaExec) { // runtime options:
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xms512m', '-Xmx512m'
    //jvmArgs '-XX:+UseConcMarkSweepGC'
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

mainClassName = 'ryzomdemos.BuildCharacter'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

task runDodgerGame(type: JavaExec) {
    mainClass = 'ryzomdemos.DodgerGame'
}

task runStatistics(type: JavaExec) {
    mainClass = 'ryzomdemos.Statistics'
}

repositories {
    //mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'com.github.stephengold:Heart:7.3.0'
    implementation 'com.github.stephengold:Acorus:0.9.8'
    implementation 'com.github.stephengold:Wes:0.6.8'
    implementation 'org.jmonkeyengine:jme3-core:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'

    // RyzomDemos doesn't use jme3-jogg nor jme3-plugins
    //  -- they are included solely to avoid warnings from AssetConfig
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanSOs', 'cleanSummary', 'cleanWrittenAssets')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
task cleanSummary(type: Delete) {
    delete 'ryzom-summary.bin'
}
task cleanWrittenAssets(type: Delete) {
    delete 'Written Assets'
}
