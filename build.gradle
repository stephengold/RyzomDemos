plugins {
    id 'application'
    id 'java'
}

description = 'build characters using Ryzom assets'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
ext.jmonkeyengineVersion = '3.2.4-stable'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) { // compile-time options:
        options.compilerArgs << '-Xdiags:verbose'
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
        options.encoding = 'UTF-8'
    }
    tasks.withType(JavaExec) { // runtime options:
        classpath sourceSets.main.runtimeClasspath
        enableAssertions true
        //jvmArgs '-verbose:gc'
        jvmArgs '-XX:+UseConcMarkSweepGC'
        //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
    }
}

mainClassName = 'ryzomdemos.BuildCharacter'
if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}
jar.manifest.attributes('Main-Class': mainClassName)

task runDodgerGame(type: JavaExec) {
    main 'ryzomdemos.DodgerGame'
}

task runStatistics(type: JavaExec) {
    main 'ryzomdemos.Statistics'
}

repositories {
    //mavenLocal()
    maven { url 'https://dl.bintray.com/stephengold/jme3utilities' }
    maven { url 'https://dl.bintray.com/stephengold/org.jmonkeyengine' } // for testdata
    jcenter()
}

dependencies {
    implementation 'org.jmonkeyengine:jme3-core:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'

    // 3 libraries included solely to avoid AssetConfig warnings:
    runtimeOnly 'org.jmonkeyengine:jme3-blender:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion

    implementation 'jme3utilities:jme3-utilities-heart:4.1.0for32'
    implementation 'jme3utilities:jme3-utilities-ui:0.7.8for32'
    implementation 'jme3utilities:Wes:0.4.5for32'
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanSOs', 'cleanSummary', 'cleanWrittenAssets')
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
task cleanSummary(type: Delete) {
    delete 'ryzom-summary.bin'
}
task cleanWrittenAssets(type: Delete) {
    delete 'Written Assets'
}
